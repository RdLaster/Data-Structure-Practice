//预处理指令
#include <stdio.h>
#include <stdlib.h>

//公约(define)
#define OK 1
#define ERROR 0
#define TRUE 1
#define FALSE 0
#define INFEASIBLE -1
#define OVERFLOW -2

//定义(typedef)
typedef int Status;
typedef char TElemType;

//二叉树的顺序存储表示
#define MAX_TREE_SIZE 100
typedef TElemType SqBiTree[MAX_TREE_SIZE];
SqBiTree bt;

//二叉树的链式储存表示
typedef struct BiTNode{
    TElemType data;
    struct BiTNode *Lchild,*Rchild;
}BiTNode,*BiTree;


//visit函数需要预先定义
Status Visit(TElemType e){
    printf("%c",e);
    return OK;
}

//二叉链表的先序遍历算法
Status PreOrderTraverse(BiTree T,Status(* Visit)(TElemType e))
{
    if(T) {
        if(Visit(T->data))
            if(PreOrderTraverse(T->Lchild, Visit))
                if(PreOrderTraverse(T->Rchild, Visit)) return OK;
        return ERROR;
    }else return OK;
}
//二叉链表的中序遍历算法
Status InOrderTraverse(BiTree T,Status(* Visit)(TElemType e))
{
    if(T){
        if(InOrderTraverse(T->Lchild, Visit))
            if(Visit(T->data))
                if(InOrderTraverse(T, Visit)) return OK;
        return ERROR;
    }else return OK;
}
//二叉链表的后序遍历算法
Status PostOrderTraverse(BiTree T,Status(* Visit)(TElemType e))
{
    if(T){
        if (PostOrderTraverse(T->Lchild,Visit))
            if(PostOrderTraverse(T->Rchild, Visit))
                if(Visit(T->data)) return OK;
        return ERROR;
    }else return OK;
}

//先序递归创建二叉链表
BiTree CreateBiTree(BiTree &T)
{
    char ch;
    scanf("%c",&ch);
    if(ch==' ') T=NULL;
    else{
        T=(BiTNode*)malloc(sizeof(BiTNode));
        if(!T) exit(OVERFLOW);
        T->data = ch;   //生成根结点
        CreateBiTree(T->Lchild); //构造左子树
        CreateBiTree(T->Rchild); //构造右子树
    }
    return T;
}

/*建立二叉树
int main(void)
{
    BiTree T;
    CreateBiTree(T);
    PostOrderTraverse(T,Visit);
    printf("\n");
}
 */

//线索二叉树的定义
typedef enum pointerTag {Link=0,Thread=1}pointerTag; //typedef和define的区别：typedef用于定义数据类型，define用于控制宏
typedef struct BiThrNode
{
    TElemType data;
    struct BiThrNode *Lchild,*Rchild;
    pointerTag LTag,RTag;
}BiThrNode,*BiThrTree;

//双亲表示法
typedef struct PTNode{
    TElemType data;
    int parent;
}PTNode;

typedef struct {
    PTNode node[100];
    int r,n;
}PTree;
